GO
Brief introduction to GO programming language

Why...
I like
	. Sintax
	. Funcitonal
	. Object Oriented
	. Concurrent programming model

History...
	. The Go programming language began as an internal Google project in 2007
	. By Robert Griesemer, Rob Pike and Ken Thompson
	. On November 10, 2009, Go was publicly unveiled under a liberal open source license

Advantages...
	. Go is designed to scale efficiently so...
	. Can be used to build very big applications
	. Lightning-fast compilation speed is made possible
		. because the language is easy to parse
		. because of its dependency management
	. Garbage collector
	. Concuurrency using a CSP (Communicating Sequential Processes) by C. A. R. Hoare model allows concurrent Go programs don't nedd to do any lock

Links...
	. http://golang.org
	. https://github.com/golang
	. http://www.usingcsp.com

First of all...
	. Install the GO compiler
	. Allows you to run in memory application
	. Allows you to build application and launch it

Hello world...
	. hello.go
	. Program in go is made up of packages
	. Program start running main package at main function
	. You can import other packages using the import keyword
	. hello1.go
	
Variables and consts...
	. vars.go
	**** remember BitFlag sample
	. boolean types
		. !b
		. a || b
		. a && b
		. x < y
		. x <= y
		. x == y
		. x != y
		. x >= y
		. x > y

	. Integer types
		. byte
		. int
		. int8
		. int16
		. int32
		. int64
		. rune (int32)
		. uint
		. uint8
		. uint16
		. uint32
		. uint64
		. uintptr (capable to store a pointer)

		. integer supports all the normal operations plus the bitwise operations
			. x &= y (bitwise and)
			. x |= y (bitwise or)
			. x ^= y (bitwise xor)
			. x >>= u (shift right like mult * 2)
			. x <<= u (shift left like div * 2)
			. ecc..

	. Floating point types
		. float32
		. float64

	. Complex types
		. complex32
		. complex64

	. String types
		. Go string is a sequence of variable-width characters where each character is represented by one or more bytes, normally using the UTF-8 encoding
		. + concatenation
		. s[n] raw byte at n position
		. s[n:m] a string from n to m-1 position
		. s[n:] a string from n to last position
		. s[:m] a string from 0 to m-1
		. string(i) convert and integere to a string
		. strings support the usual comparison operators (<, <=, ==,!=, >, >=)
		. Examples of strings package functions : strings.go
		. For sstrings conversions use the strconv package
		. For advanced string operations use the regexp package
		. Examples of fmt package formatting : fmt.go	

	. Values, Pointers and References
		. Go’s pointers work just like those in C and C++
		. Nor does Go need free() or delete since Go has a garbage collector
		  and manages memory automatically
		. Variables normally stores values except for
			. variables that refer to channels, functions, methods, maps and
			  slices that holde references
			. variables taht hold pointers
		. Remember that variables are passed to function by value, so it is copied.
		  Arrays are passed by value so in most case can be expensive
		. A pointer is a variable that holds another variable’s memory address
			. A variable pointed to by a pointer can be modified through the pointer 
			. Pointers are cheap to pass (8 bytes on 64-bit machines, 4 bytes on 32-bit machines)
			. pointed-to variables persist in memory for the entire scope
			. * operator is oveloaded to define a pointer
			. & operator is overloaded to de-reference a pointer
			. pointers.go
			. pointersSwap.go
		. we can define structure types using the struct keyword
			. struct.go

	. Collection types
		. Array
			. A Go array is a fixed-length sequence of items of the same type
			. Array items are indexed using the [] index operator by their 0-based position
			. array.go
			. Array are alway passed by value to a function so it is copied
			. It is better to create a slice over an array
				. make([]Type, len, cap)
				. array1.go
				. a[n], a[:m], a[n:], a[n:m], len(s), cap(a)

		. A slice is a reference to a hidden array
			. When we change the data of a slice, the original data is changed
			. slice.go
		
		. Using the range keyword we can iterate the slice
			. iterate.go

		. Insert and append slices
			. append.go

		. Sort and searching slices
			. sort.go

		. Maps
			. A Go map is an unordered collection of key–value
			. Keys are unique and may only be of a type that sensibly supports the == and !=
			. A map’s keys must all be of the same type
			. Maps are reference types
			. maps.go
			. buil-in make function is used to create map, sloce and channels

Procedural programming...
	. Go can be used to write purely procedural programs,
	. Go can be used to write object-oriented programs
	. Go can be used to write programs that combine both paradigms

	. Go’s syntax requires the use of semicolons as statement terminators
	. In effect very few semicolons are nedded becouse the compilerinsert it automatically; it is very important the indentation, the new line and the open brace
	. procedural.go

	. Barnching
		. If
			if optionalStatement1; booleanExpression1 {
				block1
			} else if optionalStatement2; booleanExpression2 {
				block2
			} else {
				block3
			}	

			. The braces are mandatory
			. Semicolon is needed only if an optional statement is present

		. Switch
			switch optionalStatement; optionalExpression {
				case expressionList1: block1
				...
				case expressionListN: blockN
				default: blockD		
			}

			. the optiona statement is optional; if exists semicolon is needed
			. default block is optional
			. Each case must have an expression list of one or more comma-separated
			. we can define a case block with a fallthrough to pass to the next

		. select

	. Looping with for

			for optionalPreStatement; booleanExpression; optionalPostStatement {
				block
			}

			. The braces are mandatory
			. semicolon is only needed if optional pre-post is used
			. we could use labels to break or continue a loop
			. for.go

	. Defer, panic and recover
		. defer.go
		. defer is used to defer the execution of a function after the return
		. if more then one defer statement is used, they are executed in LIFO
		. panic and recover provides exception handling
			. panic is used to raise exception
			. calling panic the execution of the enclosing function or method stops immediately
			. any defferd function are called
			. with recover we handling the exception
			. panic.go

	. Functions

		func functionName(optionalParameters) (optionalReturnValues) {
			body
		}

		. where parameters: params1 type1, ..., paramsN typeN
		. for variadic functions use the elippse ...
		. function could return more then one value
		. Go reserve two function names 
			. main() entry point present only in the main package
			. init() present in all packages and called at the initialization

		. Closures
			. closure.go
			. A closure is a function which “captures” any constants and variables that are present in the same scope where it is created
			. In Go, every anonymous function (function literal) is a closure
		
		. Recursive
			. A function that calls itself
			. fibonacci.go

		. Dynamic function
			. Since Go functions are first-class values it is possible to store them in variables
			. firstClass.go
			. dynFunc.go
			. Just to complete, Go supports High order functions
			. is a function that takes one or more other functions as arguments
			. highOrder.go

		. Generic function
			. In Go does not exists generics or template
			. We can use the type interface{} to generalize the parameters
			. generics.go

Object-Oriented programming...
	. Object oriented is so different from C++, Java, ecc.
	. It does not support inheritance
	. Go supports only aggregation (composition) and embedding
	. Another aspecct is that interface and methods are kept separate (there is no connection between custom type's method and any interface)

	. Custom types

		 type typeName typeSpecification

		 . type specification could be each build-in types or struct
		 . We can add methods to custom types adding a special kind of function on a value of a custom type
		 The sintax for defining method is almost identical to that for defining function except taht between func keyword and the name we must write the receiver
		 	. types.go
		 . We can ovveride methods in embedded object
		 	. call of methods defined in type and not in the parent type
		 	. embedded.go

		 . Interfaces
		 	. In Go an interface is a custom type that specifies a set of one or more method signature
		 	. Interfaces are wholly abstract, so it is not possible to instantiate an interface
		 	. The interface{} type is the interface that specifies the empty set of methods
		 	. Every value satisfies the interface{}
		 	. interface.go

		 . Structs
		 	. Custom types can be based on structs which are used to aggregate and embed values together
		 	. embedded.go
		 	. Structs support embedding
			 	. Embedd when specify only the type			 
			 	. Aggregating specifying the field name too
			. Every field name in a struct must be unique
			. It also possible to aggregate and embed interfaces; in this case the filed can store any values that satisfies the interface's specification
			. embinterface.go

Concurrent programming...
	. Concurrent programming is quite different from parallel programming
		. Concurency is the composition of independently executing processes
			. dealing lots of thing at once
		. Parallelism is the simultaneous execution of computations
			. doing lots of thing at once
	
	. 1) Go provides high-level support for concurrent programming yhat makes it much easier
	. 2) Concurrent processing is done in goroutines that are much more lightweight than threads
	. 3) Automatic garbage collection manage memory for you

	. Go’s built-in high-level API for writing concurrent programs is based on CSP
	. This means that explicit locking can be avoided, with synchronization achieved by sending and receiving data via thread-safe channels

	. Concurrent programming in Go means go routines and channels

	. Go also provides the same low-level functionality as other languages provide in a specific package called sync and atomic, but they are not intended for use by application programmers

	. go routines is a function that can be concurrent executed
	. Channels provide a lock-free means of communication between concurrently running goroutines
	. When a channel communication takes place at the moment of communication the sending and receiving channels are synchronized
	. Channels are bidirectional; we can send values into them and we can receive values from them
	. Sending values through channels is intrinsically safe since these are copied
	. Sending pointers or references through channels is not intrinsically safe
	. concurrent.go
	. jobs.go
